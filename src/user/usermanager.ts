import { ExtendedSocket } from 'extendedsocket'

import { Room, RoomStatus } from 'room/room'

import { User } from 'user/user'
import { UserInventory } from './userinventory'

import { ChannelManager } from 'channel/channelmanager'

import { FavoritePacketType } from 'packets/favoriteshared'
import { HostPacketType } from 'packets/hostshared'

import { InFavoritePacket } from 'packets/in/favorite'
import { InFavoriteSetLoadout } from 'packets/in/favorite/setloadout'
import { InHostPacket } from 'packets/in/host'
import { InHostSetBuyMenu } from 'packets/in/host/setbuymenu'
import { InHostSetInventory } from 'packets/in/host/setinventory'
import { InHostSetLoadout } from 'packets/in/host/setloadout'
import { InLoginPacket } from 'packets/in/login'
import { InVersionPacket } from 'packets/in/version'

import { InFavoriteSetCosmetics } from 'packets/in/favorite/setcosmetics';
import { OutFavoritePacket } from 'packets/out/favorite'
import { OutHostPacket } from 'packets/out/host'
import { OutInventoryPacket } from 'packets/out/inventory'
import { OutOptionPacket } from 'packets/out/option'
import { OutUserInfoPacket } from 'packets/out/userinfo'
import { OutUserStartPacket } from 'packets/out/userstart'
import { OutVersionPacket } from 'packets/out/version'

/**
 * handles the user logic
 */
export class UserManager {
    private users: User[]
    private nextUserId: number

    constructor() {
        this.users = []
        this.nextUserId = 1
    }

    /**
     * called when we receive a login request packet
     * @param loginData the login packet's data
     * @param sourceSocket the client's socket
     * @param server the instance to the server
     */
    public onLoginPacket(loginData: Buffer, sourceSocket: ExtendedSocket,
                         channels: ChannelManager, holepunchPort: number): boolean {
        const loginPacket: InLoginPacket = new InLoginPacket(loginData)

        const newUser: User = this.loginUser(loginPacket.gameUsername,
            loginPacket.password, sourceSocket)

        if (newUser == null) {
            console.warn('login failed for user %s (uuid: %s)',
                loginPacket.gameUsername, sourceSocket.uuid)
            return false
        }

        console.log('user %s logged in (uuid: %s)',
            loginPacket.gameUsername, sourceSocket.uuid)

        this.sendUserInfoTo(newUser, holepunchPort)
        channels.sendChannelListTo(newUser)

        this.sendUserInventory(newUser)

        return true
    }

    /**
     * handles the incoming host packets
     * @param packetData the host's packet data
     * @param sourceSocket the client's socket
     */
    public onHostPacket(packetData: Buffer, sourceSocket: ExtendedSocket): boolean {
        const hostPacket: InHostPacket = new InHostPacket(packetData)

        const user: User = this.getUserByUuid(sourceSocket.uuid)

        if (user == null) {
            console.warn('Socket %s sent a host packet, but isn\'t logged in', sourceSocket.uuid)
            return false
        }

        switch (hostPacket.packetType) {
            case HostPacketType.OnGameEnd:
                return this.onHostGameEnd(user)
            case HostPacketType.SetInventory:
                const inventoryData: InHostSetInventory = new InHostSetInventory(hostPacket)
                return this.onHostSetUserInventory(inventoryData, user)
            case HostPacketType.SetLoadout:
                const loadoutData: InHostSetLoadout = new InHostSetLoadout(hostPacket)
                return this.onHostSetUserLoadout(loadoutData, user)
            case HostPacketType.SetBuyMenu:
                const buyMenuData: InHostSetBuyMenu = new InHostSetBuyMenu(hostPacket)
                return this.onHostSetUserBuyMenu(buyMenuData, user)
        }

        console.warn('UserManager::onHostPacket: unknown host packet type %i',
            hostPacket.packetType)

        return false
    }

    public onHostGameEnd(user: User): boolean {
        const currentRoom: Room = user.currentRoom

        if (currentRoom == null) {
            console.warn('User %s sent an host entity num packet without being in a room',
                user.userName)
            return false
        }

        console.log('Ending game for room "%s" (room id %i)',
            currentRoom.settings.roomName, currentRoom.id)

        currentRoom.setStatus(RoomStatus.Waiting)
        currentRoom.resetIngameUsersReadyStatus()

        currentRoom.recurseUsers((u: User): void => {
            currentRoom.sendRoomStatusTo(u)
            currentRoom.sendRoomUsersReadyStatusTo(u)
            if (currentRoom.isUserIngame(u) === true) {
                currentRoom.sendGameEnd(u)
                currentRoom.setUserIngame(u, false)
            }
        })

        currentRoom.sendBroadcastReadyStatus()

        return true
    }

    public onHostSetUserInventory(preloadData: InHostSetInventory, host: User): boolean {
        const currentRoom: Room = host.currentRoom

        if (currentRoom == null) {
            console.warn('Host %s sent an user\'s inventory request without being in a room',
                host.userName)
            return false
        }

        if (currentRoom.host !== host) {
            console.warn('Host %s sent an user\'s inventory request without being the room\'s host.'
                + 'Real host: "%s" room "%s" (id %i)',
                host.userName, currentRoom.host.userName, currentRoom.settings.roomName, currentRoom.id)
            return false
        }

        const userId: number = preloadData.userId
        const user: User = this.getUserById(userId)

        this.sendUserInventoryTo(host, user)

        console.log('Sending user "%s"\'s inventory to host "%s", room %s (room id %i)',
            host.userName, currentRoom.host.userName, currentRoom.settings.roomName, currentRoom.id)

        return true
    }

    public onHostSetUserLoadout(loadoutData: InHostSetLoadout, host: User): boolean {
        const currentRoom: Room = host.currentRoom

        if (currentRoom == null) {
            console.warn('Host %s sent an user\'s loadout request without being in a room',
                host.userName)
            return false
        }

        if (currentRoom.host !== host) {
            console.warn('Host %s sent an user\'s loadout request without being the room\'s host.'
                + 'Real host: "%s" room "%s" (id %i)',
                host.userName, currentRoom.host.userName, currentRoom.settings.roomName, currentRoom.id)
            return false
        }

        const userId: number = loadoutData.userId
        const user: User = this.getUserById(userId)

        this.sendUserLoadoutTo(host, user)

        console.log('Sending user "%s"\'s loadout to host "%s", room %s (room id %i)',
            host.userName, currentRoom.host.userName, currentRoom.settings.roomName, currentRoom.id)

        return true
    }

    public onHostSetUserBuyMenu(buyMenuData: InHostSetBuyMenu, host: User): boolean {
        const currentRoom: Room = host.currentRoom

        if (currentRoom == null) {
            console.warn('Host %s sent an user\'s buy menu request without being in a room',
                host.userName)
            return false
        }

        if (currentRoom.host !== host) {
            console.warn('Host %s sent an user\'s buy menu request without being the room\'s host.'
                + 'Real host: "%s" room "%s" (id %i)',
                host.userName, currentRoom.host.userName, currentRoom.settings.roomName, currentRoom.id)
            return false
        }

        const userId: number = buyMenuData.userId
        const user: User = this.getUserById(userId)

        this.sendUserBuyMenuTo(host, user)

        console.log('Sending user "%s"\'s buy menu to host "%s", room %s (room id %i)',
            host.userName, currentRoom.host.userName, currentRoom.settings.roomName, currentRoom.id)

        return true
    }

    public onVersionPacket(versionData: Buffer, sourceSocket: ExtendedSocket): boolean {
        const versionPacket: InVersionPacket = new InVersionPacket(versionData)
        console.log(sourceSocket.uuid + ' sent a version packet. clientHash: '
            + versionPacket.clientHash)

        // i think the client ignores the hash string
        const versionReply: Buffer = new OutVersionPacket(
            false, '6246015df9a7d1f7311f888e7e861f18', sourceSocket).build()

        sourceSocket.send(versionReply)

        return true
    }

    public onFavoritePacket(favoriteData: Buffer, sourceSocket: ExtendedSocket): boolean {
        const favPacket: InFavoritePacket = new InFavoritePacket(favoriteData)
        const user: User = this.getUserByUuid(sourceSocket.uuid)

        if (user == null) {
            console.warn('Uuid %s sent a favorite packet without login', sourceSocket.uuid)
            return false
        }

        switch (favPacket.packetType) {
            case FavoritePacketType.SetLoadout:
                const loadoutData: InFavoriteSetLoadout = new InFavoriteSetLoadout(favPacket)
                return this.onFavoriteSetLoadout(loadoutData, user)
            case FavoritePacketType.SetCosmetics:
                const cosmeticsData: InFavoriteSetCosmetics = new InFavoriteSetCosmetics(favPacket)
                return this.onFavoriteSetCosmetics(cosmeticsData, user)
        }

        console.warn('UserManager::onFavoritePacket: unknown host packet type %i',
            favPacket.packetType)

        return false
    }

    public onFavoriteSetLoadout(loadoutData: InFavoriteSetLoadout, user: User): boolean {
        const loadoutNum: number = loadoutData.loadout
        const slot: number = loadoutData.weaponSlot
        const itemId: number = loadoutData.itemId

        console.log('Setting user "%s"\'s new weapon %i to slot %i in loadout %i',
            user.userName, itemId, slot, loadoutNum)

        user.inventory.setLoadoutWeapon(loadoutNum, slot, itemId)

        return true
    }

    public onFavoriteSetCosmetics(cosmeticsData: InFavoriteSetCosmetics, user: User): boolean {
        const slot: number = cosmeticsData.slot
        const itemId: number = cosmeticsData.itemId

        console.log('Setting user "%s"\'s new cosmetic %i to slot %i',
            user.userName, itemId, slot)

        user.inventory.setCosmetic(slot, itemId)

        return true
    }

    public loginUser(userName: string, password: string, sourceSocket: ExtendedSocket): User {
        return this.addUser(userName, sourceSocket)
    }

    public isUuidLoggedIn(uuid: string): boolean {
        return this.getUserByUuid(uuid) != null
    }

    public addUser(userName: string, socket: ExtendedSocket): User {
        const newUser: User = new User(socket, this.nextUserId++, userName)
        this.users.push(newUser)
        return newUser
    }

    public getUserById(userId: number): User {
        for (const user of this.users) {
            if (user.userId === userId) {
                return user
            }
        }
        return null
    }

    public getUserByUuid(uuid: string): User {
        for (const user of this.users) {
            if (user.socket.uuid === uuid) {
                return user
            }
        }
        return null
    }

    public removeUser(targetUser: User): void {
        this.cleanUpUser(targetUser)
        this.users.splice(this.users.indexOf(targetUser), 1)
    }

    public removeUserById(userId: number): void {
        for (const user of this.users) {
            if (user.userId === userId) {
                this.cleanUpUser(user)
                this.users.splice(this.users.indexOf(user), 1)
                return
            }
        }
    }

    public removeUserByUuid(uuid: string): void {
        for (const user of this.users) {
            if (user.socket.uuid === uuid) {
                this.cleanUpUser(user)
                this.users.splice(this.users.indexOf(user), 1)
                return
            }
        }
    }

    /**
     * sends an user's inventory to itself
     * @param user the target user
     */
    private sendUserInventory(user: User): void {
        const inventory: UserInventory = user.inventory
        const userInvReply: Buffer =
            new OutInventoryPacket(user.socket).createInventory(inventory.getUserInventory())
        user.socket.send(userInvReply)
        const defaultInvReply: Buffer =
            new OutInventoryPacket(user.socket).addInventory(inventory.getDefaultInventory())
        user.socket.send(defaultInvReply)
        // TO BE REVERSED
        const unlockReply: Buffer = Buffer.from([0x55, 0x19, 0x5F, 0x05, 0x5A, 0x01, 0x4B, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x0B, 0x00, 0x00, 0x00, 0x01, 0xE8, 0x03, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0C, 0x00,
            0x00, 0x00, 0x01, 0xDC, 0x05, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x01,
            0xE8, 0x03, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x01, 0xDC, 0x05, 0x00,
            0x00, 0x0B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x01, 0x08, 0x07, 0x00, 0x00, 0x3C, 0x00,
            0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x80, 0xBB, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x11,
            0x00, 0x00, 0x00, 0x01, 0xC0, 0x5D, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
            0x01, 0x08, 0x07, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x01, 0x4C, 0x1D,
            0x00, 0x00, 0x3B, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x60, 0x61, 0x02, 0x00, 0x35,
            0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x01, 0x30, 0x75, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00,
            0x16, 0x00, 0x00, 0x00, 0x01, 0xA0, 0x0F, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00,
            0x00, 0x01, 0x98, 0x3A, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x01, 0xE0,
            0x93, 0x04, 0x00, 0x14, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x01, 0xA0, 0x0F, 0x00, 0x00,
            0x07, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x01, 0x98, 0x3A, 0x00, 0x00, 0x3E, 0x00, 0x00,
            0x00, 0x1B, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x93, 0x04, 0x00, 0x05, 0x00, 0x00, 0x00, 0x1C, 0x00,
            0x00, 0x00, 0x01, 0x08, 0x07, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x01,
            0x30, 0x75, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x01, 0x88, 0x13, 0x00,
            0x00, 0x0C, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x01, 0x20, 0x4E, 0x00, 0x00, 0x16, 0x00,
            0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x20, 0x4E, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x43,
            0x00, 0x00, 0x00, 0x01, 0x30, 0x75, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00,
            0x01, 0x20, 0xA1, 0x07, 0x00, 0x47, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x01, 0x20, 0xA1,
            0x07, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x55,
            0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x70, 0x03, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
            0x90, 0x00, 0x00, 0x00, 0x01, 0x30, 0x75, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00,
            0x00, 0x01, 0x60, 0xEA, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x01, 0x48,
            0xE8, 0x01, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0x01, 0x40, 0x0D, 0x03, 0x00,
            0x6A, 0xBF, 0x00, 0x00, 0xA8, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x70, 0xBF, 0x00,
            0x00, 0xA9, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x6F, 0xBF, 0x00, 0x00, 0xAA, 0x00,
            0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x6E, 0xBF, 0x00, 0x00, 0xAB, 0x00, 0x00, 0x00, 0x00,
            0x50, 0x00, 0x00, 0x00, 0x69, 0xBF, 0x00, 0x00, 0xAC, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
            0x00, 0x72, 0xBF, 0x00, 0x00, 0xAD, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x6B, 0xBF,
            0x00, 0x00, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x6D, 0xBF, 0x00, 0x00, 0xAF,
            0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0xD7, 0x00, 0x00, 0x00,
            0x01, 0x50, 0xC3, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00, 0xD8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x77,
            0x01, 0x00, 0x4E, 0x00, 0x00, 0x00, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x70, 0x11, 0x01, 0x00, 0x52,
            0x00, 0x00, 0x00, 0xE9, 0x00, 0x00, 0x00, 0x01, 0xC0, 0xD4, 0x01, 0x00, 0x5B, 0x00, 0x00, 0x00,
            0x06, 0x01, 0x00, 0x00, 0x01, 0xF0, 0x49, 0x02, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x19, 0x01, 0x00,
            0x00, 0x01, 0x60, 0xEA, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x1A, 0x01, 0x00, 0x00, 0x01, 0xC0,
            0xD4, 0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00, 0x01, 0xF0, 0x49, 0x02, 0x00,
            0x68, 0x00, 0x00, 0x00, 0x5C, 0x01, 0x00, 0x00, 0x01, 0x20, 0xA1, 0x07, 0x00, 0x6D, 0x00, 0x00,
            0x00, 0x82, 0x01, 0x00, 0x00, 0x01, 0xA0, 0x86, 0x01, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x83, 0x01,
            0x00, 0x00, 0x01, 0xA0, 0x86, 0x01, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x84, 0x01, 0x00, 0x00, 0x01,
            0xA0, 0x86, 0x01, 0x00, 0x42, 0x00, 0x00, 0x00, 0xFA, 0x01, 0x00, 0x00, 0x01, 0x30, 0x75, 0x00,
            0x00, 0x43, 0x00, 0x00, 0x00, 0xFB, 0x01, 0x00, 0x00, 0x01, 0x50, 0xC3, 0x00, 0x00, 0x78, 0x00,
            0x00, 0x00, 0xFC, 0x01, 0x00, 0x00, 0x01, 0x40, 0x0D, 0x03, 0x00, 0x79, 0x00, 0x00, 0x00, 0x07,
            0x02, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00,
            0x00, 0x04, 0x01, 0x00, 0x00, 0x7A, 0x00, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, 0x00, 0xE0, 0x01,
            0x00, 0x00, 0x7B, 0x00, 0x00, 0x00, 0x0A, 0x02, 0x00, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, 0x7D,
            0x00, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00,
            0x59, 0x02, 0x00, 0x00, 0x00, 0x0C, 0x03, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x91, 0x02, 0x00,
            0x00, 0x01, 0xF0, 0x49, 0x02, 0x00, 0x82, 0x00, 0x00, 0x00, 0x92, 0x02, 0x00, 0x00, 0x01, 0x00,
            0x53, 0x07, 0x00, 0x83, 0x00, 0x00, 0x00, 0x93, 0x02, 0x00, 0x00, 0x01, 0x60, 0x5B, 0x03, 0x00,
            0x85, 0x00, 0x00, 0x00, 0x94, 0x02, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x84, 0x00, 0x00,
            0x00, 0x95, 0x02, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x1F, 0x03,
            0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x8A, 0x00, 0x00, 0x00, 0xA4, 0x03, 0x00, 0x00, 0x01,
            0xE0, 0x93, 0x04, 0x00, 0x8F, 0x00, 0x00, 0x00, 0x44, 0x04, 0x00, 0x00, 0x01, 0x80, 0xA9, 0x03,
            0x00, 0x90, 0x00, 0x00, 0x00, 0x45, 0x04, 0x00, 0x00, 0x01, 0x40, 0x7E, 0x05, 0x00, 0x91, 0x00,
            0x00, 0x00, 0x46, 0x04, 0x00, 0x00, 0x01, 0x00, 0x53, 0x07, 0x00, 0x9B, 0x00, 0x00, 0x00, 0xA9,
            0x04, 0x00, 0x00, 0x01, 0xF0, 0x49, 0x02, 0x00, 0x9C, 0x00, 0x00, 0x00, 0xAA, 0x04, 0x00, 0x00,
            0x01, 0x40, 0x0D, 0x03, 0x00, 0x97, 0x00, 0x00, 0x00, 0xFC, 0x04, 0x00, 0x00, 0x01, 0x42, 0x99,
            0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0xFD, 0x04, 0x00, 0x00, 0x01, 0x86, 0x29, 0x02, 0x00, 0x99,
            0x00, 0x00, 0x00, 0xFE, 0x04, 0x00, 0x00, 0x01, 0x8C, 0xED, 0x02, 0x00, 0x10, 0x00, 0x03, 0x00,
            0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x42, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x07, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
            0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x1C, 0x00,
            0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
            0x35, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00,
            0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x13, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x08, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x3F, 0x00,
            0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00,
            0x19, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,
            0x0B, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,
            0x10, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
            0x14, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
            0x1A, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x6C, 0xBF, 0x00, 0x00, 0x71, 0xBF, 0x00, 0x00,
            0x42, 0x00, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00])
        unlockReply.writeUInt8(user.socket.getNextSeq(), 1)
        user.socket.send(unlockReply)
        const favCosmeticsReply: Buffer =
            new OutFavoritePacket(user.socket).setCosmetics(inventory.ctModelItem,
                inventory.terModelItem, inventory.headItem, inventory.gloveItem,
                inventory.backItem, inventory.stepsItem, inventory.cardItem,
                inventory.sprayItem)
        user.socket.send(favCosmeticsReply)
        const buf5: Buffer = new OutFavoritePacket(user.socket).setLoadout(inventory.loadouts)
        user.socket.send(buf5)
        const buyMenuReply: Buffer =
           new OutOptionPacket(user.socket).setBuyMenu(user.inventory.buymenu)
        user.socket.send(buyMenuReply)
    }

    /**
     * send an user's info to itself
     * @param user the target user
     */
    private sendUserInfoTo(user: User, holepunchPort: number): void {
        const userStartReply: Buffer = new OutUserStartPacket(
            user.userId, user.userName, user.userName, holepunchPort, user.socket).build()

        const userInfoReply: Buffer =
            new OutUserInfoPacket(user.socket).fullUserUpdate(user)

        user.socket.send(userStartReply)
        user.socket.send(userInfoReply)
    }

    /**
     * send the host an user's inventory
     * @param host the host to send the data to
     * @param targetUser the target user
     */
    private sendUserInventoryTo(host: User, targetUser: User): void {
        const reply: Buffer =
            new OutHostPacket(host.socket).setInventory(targetUser.userId, host.inventory.items)
        host.socket.send(reply)
    }

    /**
     * send the host an user's loadout
     * @param host the host to send the data to
     * @param targetUser the target user
     */
    private sendUserLoadoutTo(host: User, targetUser: User): void {
        const reply: Buffer =
            new OutHostPacket(host.socket).setLoadout(targetUser)
        host.socket.send(reply)
    }

    /**
     * send the host an user's loadout
     * @param host the host to send the data to
     * @param targetUser the target user
     */
    private sendUserBuyMenuTo(host: User, targetUser: User): void {
        const reply: Buffer =
            new OutHostPacket(host.socket).setBuyMenu(targetUser)
        host.socket.send(reply)
    }

    /**
     * if the user was in a room, tell it that the user has logged disconnected
     * @param user the target user
     */
    private cleanUpUser(user: User): void {
        if (user.currentRoom) {
            user.currentRoom.removeUser(user)
        }
    }
}
